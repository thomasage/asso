<?php
namespace AppBundle\Repository;

use AppBundle\Entity\Member;
use AppBundle\Entity\Search;
use AppBundle\Utils\SearchResult;
use Doctrine\ORM\EntityRepository;

/**
 * MemberRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MemberRepository extends EntityRepository
{
    /**
     * @param Search $search
     * @return SearchResult
     */
    public function findBySearch(Search $search)
    {
        $builder = $this
            ->createQueryBuilder('m')
            ->leftJoin('m.promotions', 'p')
            ->addSelect('p')
            ->leftJoin('p.rank', 'r')
            ->addSelect('r')
            ->leftJoin('m.memberships', 'ms');

        // Filter
        if (!is_null($city = $search->getFilter('city'))) {
            $builder->andWhere('m.city LIKE :city')->setParameter(':city', '%'.$city.'%');
        }
        if (!is_null($firstname = $search->getFilter('firstname'))) {
            $builder->andWhere('m.firstname LIKE :firstname')->setParameter(':firstname', '%'.$firstname.'%');
        }
        if (!is_null($lastname = $search->getFilter('lastname'))) {
            $builder->andWhere('m.lastname LIKE :lastname')->setParameter(':lastname', '%'.$lastname.'%');
        }
        if (!is_null($season = $search->getFilter('season'))) {
            $builder->andWhere('ms.season = :season')->setParameter(':season', $season);
        }

        // Orderby
        foreach ($search->getOrderby() as $key => $reverse) {

            switch ($key) {
                case 'age':
                    $builder->addOrderBy('m.birthday', $reverse === true ? 'ASC' : 'DESC');
                    break;
                case 'city':
                    $builder->addOrderBy('m.city', $reverse === true ? 'DESC' : 'ASC');
                    break;
                case 'firstname':
                    $builder->addOrderBy('m.firstname', $reverse === true ? 'DESC' : 'ASC');
                    break;
                case 'lastname':
                    $builder->addOrderBy('m.lastname', $reverse === true ? 'DESC' : 'ASC');
                    break;
            }
        }
        $builder->addOrderBy('m.id', 'ASC');

        // Page
        $builder->setMaxResults(20);
        $builder->setFirstResult($search->getPage() * 20);

        return new SearchResult($builder, $search);
    }

    /**
     * @return \AppBundle\Entity\Member[]
     */
    public function findNextBirthdays()
    {
        // Period to scan
        $start = new \DateTime('-1 week');
        $stop = new \DateTime('+3 weeks');

        $builder = $this->createQueryBuilder('m')
            ->setParameter('start', $start->format('m-d'))
            ->setParameter('stop', $stop->format('m-d'));
        if ($start->format('m') > $stop->format('m')) {
            $builder->andWhere('SUBSTRING( m.birthday, 6 ) >= :start OR SUBSTRING( m.birthday, 6 ) <= :stop');
        } else {
            $builder->andWhere('SUBSTRING( m.birthday, 6 ) BETWEEN :start AND :stop');
        }

        $members = $builder->getQuery()->getResult();

        // Sort by next birthday
        usort(
            $members,
            function (Member $a, Member $b) use ($stop) {
                $nextA = $a->getNextBirthday();
                $nextB = $b->getNextBirthday();
                if ($nextA->getTimestamp() > $stop->getTimestamp()) {
                    $nextA->modify('-1 year');
                }
                if ($nextB->getTimestamp() > $stop->getTimestamp()) {
                    $nextB->modify('-1 year');
                }

                return $nextA > $nextB;
            }
        );

        return $members;
    }
}